ANSI-C/cC++ Compiler for HC08 V-5.0.17, Apr 22 2003

    1:  /*
    2:  ** ###################################################################
    3:  **
    4:  **     THIS BEAN MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
    5:  **
    6:  **     Filename  : SERIAL.C
    7:  **
    8:  **     Project   : itext_gp32
    9:  ** 
   10:  **     Processor : MC68HC908GP32CFB
   11:  **
   12:  **     Beantype  : SynchroMaster
   13:  **
   14:  **     Version   : Bean 02.154, Driver 01.42, CPU db: 2.89.000
   15:  **
   16:  **     Compiler  : Metrowerks HC08 C Compiler
   17:  **
   18:  **     Date/Time : 19/01/2007, 19:14
   19:  **
   20:  **     Abstract  :
   21:  **
   22:  **         This bean "SynchroMaster" implements MASTER part of synchronous
   23:  **         serial master-slave communication.
   24:  **
   25:  **     Settings  :
   26:  **
   27:  **         Synchro type                : MASTER
   28:  **
   29:  **         Serial channel              : SPI
   30:  **
   31:  **         Protocol
   32:  **             Init baud rate          : 6_510us
   33:  **             Clock edge              : falling
   34:  **             Width                   : 8 bits (always)
   35:  **             Empty character         : 0
   36:  **             Empty char. on input    : RECEIVED
   37:  **
   38:  **         Registers
   39:  **             Input buffer            : SPDR      [18]
   40:  **             Output buffer           : SPDR      [18]
   41:  **             Control register        : SPCR      [16]
   42:  **             Mode register           : SPCR      [16]
   43:  **             Baud setting reg.       : SPSCR     [17]
   44:  **
   45:  **
   46:  **
   47:  **         Used pins                   : 
   48:  **       ----------------------------------------------------------
   49:  **            Function    | On package |    Name
   50:  **       ----------------------------------------------------------
   51:  **             Input      |     13     |  PTD1_MISO
   52:  **             Output     |     14     |  PTD2_MOSI
   53:  **             Clock      |     15     |  PTD3_SPSCK
   54:  **       ----------------------------------------------------------
   55:  **
   56:  **     Contents  :
   57:  **
   58:  **         RecvChar              - byte SERIAL_RecvChar(SERIAL_TComData *Chr);
   59:  **         SendChar              - byte SERIAL_SendChar(SERIAL_TComData Chr);
   60:  **         CharsInRxBuf          - byte SERIAL_CharsInRxBuf(word *Chr);
   61:  **         GetCharsInRxBuf       - word SERIAL_GetCharsInRxBuf(void);
   62:  **         SetShiftClockPolarity - byte SERIAL_SetShiftClockPolarity(byte Edge);
   63:  **         SetIdleClockPolarity  - byte SERIAL_SetIdleClockPolarity(byte Level);
   64:  **
   65:  **
   66:  **     (c) Copyright UNIS, spol. s r.o. 1997-2002
   67:  **
   68:  **     UNIS, spol. s r.o.
   69:  **     Jundrovska 33
   70:  **     624 00 Brno
   71:  **     Czech Republic
   72:  **
   73:  **     http      : www.processorexpert.com
   74:  **     mail      : info@processorexpert.com
   75:  **
   76:  ** ###################################################################
   77:  */
   78:  
   79:  
   80:  /* MODULE SERIAL. */
   81:  
   82:  #include "SERIAL.h"
   83:  #include "SHIFT_SH.h"
   84:  #include "OSD_LD.h"
   85:  #include "OSD_MUTE.h"
   86:  
   87:  #define OVERRUN_ERR      1             /* Overrun error flag bit   */
   88:  #define CHAR_IN_RX       8             /* Char is in RX buffer     */
   89:  #define FULL_TX          16            /* Full transmit buffer     */
   90:  #define RUNINT_FROM_TX   32            /* Interrupt is in progress */
   91:  #define FULL_RX          64            /* Full receive buffer      */
   92:  
   93:  static bool EnUser;                    /* Enable/Disable SPI */
   94:  static byte SerFlag;                   /* Flags for serial communication */
   95:                                         /* Bits: 0 - OverRun error */
   96:                                         /*       1 - Unused */
   97:                                         /*       2 - Unused */
   98:                                         /*       3 - Char in RX buffer */
   99:                                         /*       4 - Full TX buffer */
  100:                                         /*       5 - Running int from TX */
  101:                                         /*       6 - Full RX buffer */
  102:                                         /*       7 - Unused */
  103:  static byte BufferWrite;               /* Output char SPI commmunication */
  104:  
  105:  /*
  106:  ** ===================================================================
  107:  **     Method      :  HWEnDi (bean SynchroMaster)
  108:  **
  109:  **     Description :
  110:  **         This method is internal. It is used by Processor Expert
  111:  **         only.
  112:  ** ===================================================================
  113:  */
  114:  static void HWEnDi(void)
  115:  {

Function: HWEnDi
Source  : Z:\itext\itext_gp32\Code\SERIAL.C
Options : -Env"GENPATH=Z:\itext\itext_gp32;Z:\itext\itext_gp32\bin;Z:\itext\itext_gp32\prm;Z:\itext\itext_gp32\cmd;Z:\itext\itext_gp32\Sources;D:\Archivos de programa\Metrowerks\CodeWarrior CW08_V3.0\lib\HC08c\LIB;D:\Archivos de programa\Metrowerks\CodeWarrior CW08_V3.0\lib\HC08c\SRC;Z:\itext\itext_gp32\Code;Z:\itext\itext_gp32\doc;D:\Archivos de programa\Metrowerks\CodeWarrior CW08_V3.0\lib\hc08c\include;D:\Archivos de programa\Metrowerks\CodeWarrior CW08_V3.0\Bin\Plugins\support\ProcessorExpert\PESL\HC08;D:\Archivos de programa\Metrowerks\CodeWarrior CW08_V3.0\Bin\Plugins\support\ProcessorExpert;D:\Archivos de programa\Metrowerks\CodeWarrior CW08_V3.0\lib\HC08c\INCLUDE" -Env"LIBPATH=D:\Archivos de programa\Metrowerks\CodeWarrior CW08_V3.0\lib\HC08c\INCLUDE" -EnvOBJPATH=Z:\itext\itext_gp32\bin -EnvTEXTPATH=Z:\itext\itext_gp32\bin -Lasm=%n.lst -Ms -ObjN=Z:\itext\itext_gp32\itext-gp32_Data\P&E_FCS\ObjectCode\SERIAL.C.o -WmsgSd1106

  116:    if (EnUser) {                        /* Enable device? */
  0000 c60000           LDA   EnUser
  0003 2714             BEQ   L19 ;abs = 0019
  117:      SPCR_SPE = 1;                      /* Enable device */
  0005 1200             BSET  1,_SPCR
  118:      if (SerFlag & FULL_TX) {           /* Is any char in transmit buffer? */
  0007 c60000           LDA   SerFlag
  000a a510             BIT   #16
  000c 270d             BEQ   L1B ;abs = 001b
  119:        SPDR = BufferWrite;              /* Store char to transmitter register */
  000e ce0000           LDX   BufferWrite
  0011 bf00             STX   _SPDR
  120:      SerFlag &= ~FULL_TX;               /* Zeroize FULL_TX flag */
  0013 a4ef             AND   #-17
  0015 c70000           STA   SerFlag
  0018 81               RTS   
  0019          L19:    
  121:      }
  122:    }
  123:    else {
  124:      SPCR_SPE = 0;                      /* Disable device */
  0019 1300             BCLR  1,_SPCR
  001b          L1B:    
  125:    }
  126:  }
  001b 81               RTS   
  127:  
  128:  /*
  129:  ** ===================================================================
  130:  **     Method      :  SERIAL_RecvChar (bean SynchroMaster)
  131:  **
  132:  **     Description :
  133:  **         If any data received, this method returns one character,
  134:  **         otherwise it returns error code (it does not wait for
  135:  **         data).
  136:  **     Parameters  :
  137:  **         NAME            - DESCRIPTION
  138:  **       * Chr             - Pointer to received character
  139:  **     Returns     :
  140:  **         ---             - Error code, possible codes:
  141:  **                           ERR_OK - OK
  142:  **                           ERR_SPEED - This device does not work in
  143:  **                           the active speed mode
  144:  **                           ERR_RXEMPTY - No data in receiver
  145:  **                           ERR_OVERRUN - Overrun error was detected
  146:  **                           from last char or block receiving
  147:  **                           ERR_FAULT - Fault error was detected
  148:  **                           from last char or block receiving. This
  149:  **                           error may not be supported on some CPUs
  150:  **                           (see generated code).
  151:  ** ===================================================================
  152:  */
  153:  byte SERIAL_RecvChar(byte *Chr)
  154:  {

Function: SERIAL_RecvChar
Source  : Z:\itext\itext_gp32\Code\SERIAL.C
Options : -Env"GENPATH=Z:\itext\itext_gp32;Z:\itext\itext_gp32\bin;Z:\itext\itext_gp32\prm;Z:\itext\itext_gp32\cmd;Z:\itext\itext_gp32\Sources;D:\Archivos de programa\Metrowerks\CodeWarrior CW08_V3.0\lib\HC08c\LIB;D:\Archivos de programa\Metrowerks\CodeWarrior CW08_V3.0\lib\HC08c\SRC;Z:\itext\itext_gp32\Code;Z:\itext\itext_gp32\doc;D:\Archivos de programa\Metrowerks\CodeWarrior CW08_V3.0\lib\hc08c\include;D:\Archivos de programa\Metrowerks\CodeWarrior CW08_V3.0\Bin\Plugins\support\ProcessorExpert\PESL\HC08;D:\Archivos de programa\Metrowerks\CodeWarrior CW08_V3.0\Bin\Plugins\support\ProcessorExpert;D:\Archivos de programa\Metrowerks\CodeWarrior CW08_V3.0\lib\HC08c\INCLUDE" -Env"LIBPATH=D:\Archivos de programa\Metrowerks\CodeWarrior CW08_V3.0\lib\HC08c\INCLUDE" -EnvOBJPATH=Z:\itext\itext_gp32\bin -EnvTEXTPATH=Z:\itext\itext_gp32\bin -Lasm=%n.lst -Ms -ObjN=Z:\itext\itext_gp32\itext-gp32_Data\P&E_FCS\ObjectCode\SERIAL.C.o -WmsgSd1106

  0000 87               PSHA  
  0001 89               PSHX  
  0002 8b               PSHH  
  155:    byte Status;
  156:  
  157:    Status = SPSCR;                      /* Read the device error register */
  0003 b600             LDA   _SPSCR
  0005 95               TSX   
  0006 f7               STA   ,X
  158:    *Chr = SPDR;                         /* Read data from receiver */
  0007 ee02             LDX   2,X
  0009 9ee602           LDA   2,SP
  000c 87               PSHA  
  000d 9ee602           LDA   2,SP
  0010 8a               PULH  
  0011 5e00             MOV   _SPDR,X+
  159:    if (!(Status & 128))                 /* Is not received char? */
  0013 4d               TSTA  
  0014 2b04             BMI   L1A ;abs = 001a
  160:      return ERR_RXEMPTY;                /* If yes then error is returned */
  0016 a60a             LDA   #10
  0018 2008             BRA   L22 ;abs = 0022
  001a          L1A:    
  161:    if (Status & 32)                     /* Is the overrun error flag set? */
  001a a520             BIT   #32
  001c 2703             BEQ   L21 ;abs = 0021
  162:      return ERR_OVERRUN;                /* If yes then error is returned  */
  001e a60d             LDA   #13
  0020 21               SKIP1 L22 ;abs = 0022
  0021          L21:    
  163:    return ERR_OK;
  0021 4f               CLRA  
  0022          L22:    
  164:  }
  0022 a703             AIS   #3
  0024 81               RTS   
  165:  
  166:  /*
  167:  ** ===================================================================
  168:  **     Method      :  SERIAL_SendChar (bean SynchroMaster)
  169:  **
  170:  **     Description :
  171:  **         Send one character to the channel.
  172:  **     Parameters  :
  173:  **         NAME            - DESCRIPTION
  174:  **         Chr             - Character to send
  175:  **     Returns     :
  176:  **         ---             - Error code, possible codes:
  177:  **                           ERR_OK - OK
  178:  **                           ERR_SPEED - This device does not work in
  179:  **                           the active speed mode
  180:  **                           ERR_TXFULL - Transmitter is full
  181:  ** ===================================================================
  182:  */
  183:  byte SERIAL_SendChar(byte Chr)
  184:  {

Function: SERIAL_SendChar
Source  : Z:\itext\itext_gp32\Code\SERIAL.C
Options : -Env"GENPATH=Z:\itext\itext_gp32;Z:\itext\itext_gp32\bin;Z:\itext\itext_gp32\prm;Z:\itext\itext_gp32\cmd;Z:\itext\itext_gp32\Sources;D:\Archivos de programa\Metrowerks\CodeWarrior CW08_V3.0\lib\HC08c\LIB;D:\Archivos de programa\Metrowerks\CodeWarrior CW08_V3.0\lib\HC08c\SRC;Z:\itext\itext_gp32\Code;Z:\itext\itext_gp32\doc;D:\Archivos de programa\Metrowerks\CodeWarrior CW08_V3.0\lib\hc08c\include;D:\Archivos de programa\Metrowerks\CodeWarrior CW08_V3.0\Bin\Plugins\support\ProcessorExpert\PESL\HC08;D:\Archivos de programa\Metrowerks\CodeWarrior CW08_V3.0\Bin\Plugins\support\ProcessorExpert;D:\Archivos de programa\Metrowerks\CodeWarrior CW08_V3.0\lib\HC08c\INCLUDE" -Env"LIBPATH=D:\Archivos de programa\Metrowerks\CodeWarrior CW08_V3.0\lib\HC08c\INCLUDE" -EnvOBJPATH=Z:\itext\itext_gp32\bin -EnvTEXTPATH=Z:\itext\itext_gp32\bin -Lasm=%n.lst -Ms -ObjN=Z:\itext\itext_gp32\itext-gp32_Data\P&E_FCS\ObjectCode\SERIAL.C.o -WmsgSd1106

  0000 87               PSHA  
  185:    if ((!SPSCR_SPTE)||(SerFlag&FULL_TX)) { /* Is last character send? */
  0001 070007           BRCLR 3,_SPSCR,LB ;abs = 000b
  0004 c60000           LDA   SerFlag
  0007 a510             BIT   #16
  0009 2704             BEQ   LF ;abs = 000f
  000b          LB:     
  186:      return ERR_TXFULL;                 /* If no then return error */
  000b a60b             LDA   #11
  187:    }
  188:    if(EnUser) {                         /* Is device enabled? */
  189:      SPDR = Chr;                        /* If yes, send character */
  190:    }
  191:    else {
  192:      BufferWrite = Chr;                 /* If no, save character */
  193:      SerFlag |= FULL_TX;                /* ...and set flag */
  194:    }
  195:    return ERR_OK;                       /* OK */
  196:  }
  000d 8a               PULH  
  000e 81               RTS   
  000f          LF:     
  000f ce0000           LDX   EnUser
  0012 2706             BEQ   L1A ;abs = 001a
  0014 95               TSX   
  0015 f6               LDA   ,X
  0016 b700             STA   _SPDR
  0018 200a             BRA   L24 ;abs = 0024
  001a          L1A:    
  001a 95               TSX   
  001b fe               LDX   ,X
  001c cf0000           STX   BufferWrite
  001f aa10             ORA   #16
  0021 c70000           STA   SerFlag
  0024          L24:    
  0024 4f               CLRA  
  0025 8a               PULH  
  0026 81               RTS   
  197:  
  198:  /*
  199:  ** ===================================================================
  200:  **     Method      :  SERIAL_CharsInRxBuf (bean SynchroMaster)
  201:  **
  202:  **     Description :
  203:  **         Return number of characters in the input buffer.
  204:  **         (deprecated method)
  205:  **     Parameters  :
  206:  **         NAME            - DESCRIPTION
  207:  **       * Chr             - Pointer to number of characters in the
  208:  **                           input buffer
  209:  **     Returns     :
  210:  **         ---             - Error code, possible codes:
  211:  **                           ERR_OK - OK
  212:  **                           ERR_SPEED - This device does not work in
  213:  **                           the active speed mode
  214:  ** ===================================================================
  215:  */
  216:  byte SERIAL_CharsInRxBuf(word *Chr)
  217:  {

Function: SERIAL_CharsInRxBuf
Source  : Z:\itext\itext_gp32\Code\SERIAL.C
Options : -Env"GENPATH=Z:\itext\itext_gp32;Z:\itext\itext_gp32\bin;Z:\itext\itext_gp32\prm;Z:\itext\itext_gp32\cmd;Z:\itext\itext_gp32\Sources;D:\Archivos de programa\Metrowerks\CodeWarrior CW08_V3.0\lib\HC08c\LIB;D:\Archivos de programa\Metrowerks\CodeWarrior CW08_V3.0\lib\HC08c\SRC;Z:\itext\itext_gp32\Code;Z:\itext\itext_gp32\doc;D:\Archivos de programa\Metrowerks\CodeWarrior CW08_V3.0\lib\hc08c\include;D:\Archivos de programa\Metrowerks\CodeWarrior CW08_V3.0\Bin\Plugins\support\ProcessorExpert\PESL\HC08;D:\Archivos de programa\Metrowerks\CodeWarrior CW08_V3.0\Bin\Plugins\support\ProcessorExpert;D:\Archivos de programa\Metrowerks\CodeWarrior CW08_V3.0\lib\HC08c\INCLUDE" -Env"LIBPATH=D:\Archivos de programa\Metrowerks\CodeWarrior CW08_V3.0\lib\HC08c\INCLUDE" -EnvOBJPATH=Z:\itext\itext_gp32\bin -EnvTEXTPATH=Z:\itext\itext_gp32\bin -Lasm=%n.lst -Ms -ObjN=Z:\itext\itext_gp32\itext-gp32_Data\P&E_FCS\ObjectCode\SERIAL.C.o -WmsgSd1106

  0000 87               PSHA  
  0001 89               PSHX  
  218:    *Chr = SPSCR_SPRF;                   /* Return number of chars in receive buffer */
  0002 0e0002           BRSET 7,_SPSCR,L7 ;abs = 0007
  0005 4f               CLRA  
  0006 65               SKIP2 L9 ;abs = 0009
  0007          L7:     
  0007 a601             LDA   #1
  0009          L9:     
  0009 95               TSX   
  000a ee01             LDX   1,X
  000c 87               PSHA  
  000d 9ee602           LDA   2,SP
  0010 87               PSHA  
  0011 8a               PULH  
  0012 86               PULA  
  0013 e701             STA   1,X
  0015 4f               CLRA  
  0016 7f               CLR   ,X
  219:    return ERR_OK;                       /* OK */
  220:  }
  0017 a702             AIS   #2
  0019 81               RTS   
  221:  
  222:  /*
  223:  ** ===================================================================
  224:  **     Method      :  SERIAL_GetCharsInRxBuf (bean SynchroMaster)
  225:  **
  226:  **     Description :
  227:  **         Return number of characters in the input buffer.
  228:  **         Note: If the Interrupt service is disabled, and the
  229:  **         Ignore empty character is set to yes, and a character has
  230:  **         been received, then this method returns 1 although it was
  231:  **         an empty character.
  232:  **     Parameters  : None
  233:  **     Returns     :
  234:  **         ---             - Number of characters in the input
  235:  **                           buffer.
  236:  ** ===================================================================
  237:  */
  238:  word SERIAL_GetCharsInRxBuf(void)
  239:  {

Function: SERIAL_GetCharsInRxBuf
Source  : Z:\itext\itext_gp32\Code\SERIAL.C
Options : -Env"GENPATH=Z:\itext\itext_gp32;Z:\itext\itext_gp32\bin;Z:\itext\itext_gp32\prm;Z:\itext\itext_gp32\cmd;Z:\itext\itext_gp32\Sources;D:\Archivos de programa\Metrowerks\CodeWarrior CW08_V3.0\lib\HC08c\LIB;D:\Archivos de programa\Metrowerks\CodeWarrior CW08_V3.0\lib\HC08c\SRC;Z:\itext\itext_gp32\Code;Z:\itext\itext_gp32\doc;D:\Archivos de programa\Metrowerks\CodeWarrior CW08_V3.0\lib\hc08c\include;D:\Archivos de programa\Metrowerks\CodeWarrior CW08_V3.0\Bin\Plugins\support\ProcessorExpert\PESL\HC08;D:\Archivos de programa\Metrowerks\CodeWarrior CW08_V3.0\Bin\Plugins\support\ProcessorExpert;D:\Archivos de programa\Metrowerks\CodeWarrior CW08_V3.0\lib\HC08c\INCLUDE" -Env"LIBPATH=D:\Archivos de programa\Metrowerks\CodeWarrior CW08_V3.0\lib\HC08c\INCLUDE" -EnvOBJPATH=Z:\itext\itext_gp32\bin -EnvTEXTPATH=Z:\itext\itext_gp32\bin -Lasm=%n.lst -Ms -ObjN=Z:\itext\itext_gp32\itext-gp32_Data\P&E_FCS\ObjectCode\SERIAL.C.o -WmsgSd1106

  240:    return SPSCR_SPRF;                   /* Return number of chars in receive buffer */
  0000 0e0003           BRSET 7,_SPSCR,L6 ;abs = 0006
  0003 4f               CLRA  
  0004 5f               CLRX  
  0005 81               RTS   
  0006          L6:     
  0006 a601             LDA   #1
  0008 5f               CLRX  
  241:  }
  0009 81               RTS   
  242:  
  243:  /*
  244:  ** ===================================================================
  245:  **     Method      :  SERIAL_SetShiftClockPolarity (bean SynchroMaster)
  246:  **
  247:  **     Description :
  248:  **         Set the shift clock polarity in runtime. Output data will
  249:  **         be shifted on the selected edge polarity.
  250:  **     Parameters  :
  251:  **         NAME            - DESCRIPTION
  252:  **         Edge            - Edge polarity.
  253:  **                           0-falling edge
  254:  **                           1-rising edge
  255:  **     Returns     :
  256:  **         ---             - Error code, possible codes:
  257:  **                           ERR_OK - OK
  258:  **                           ERR_SPEED - This device does not work in
  259:  **                           the active speed mode
  260:  **                           ERR_DISABLED -  Device is disabled
  261:  **                           ERR_RANGE - Parameter out of range
  262:  ** ===================================================================
  263:  */
  264:  byte SERIAL_SetShiftClockPolarity(byte Edge)
  265:  {

Function: SERIAL_SetShiftClockPolarity
Source  : Z:\itext\itext_gp32\Code\SERIAL.C
Options : -Env"GENPATH=Z:\itext\itext_gp32;Z:\itext\itext_gp32\bin;Z:\itext\itext_gp32\prm;Z:\itext\itext_gp32\cmd;Z:\itext\itext_gp32\Sources;D:\Archivos de programa\Metrowerks\CodeWarrior CW08_V3.0\lib\HC08c\LIB;D:\Archivos de programa\Metrowerks\CodeWarrior CW08_V3.0\lib\HC08c\SRC;Z:\itext\itext_gp32\Code;Z:\itext\itext_gp32\doc;D:\Archivos de programa\Metrowerks\CodeWarrior CW08_V3.0\lib\hc08c\include;D:\Archivos de programa\Metrowerks\CodeWarrior CW08_V3.0\Bin\Plugins\support\ProcessorExpert\PESL\HC08;D:\Archivos de programa\Metrowerks\CodeWarrior CW08_V3.0\Bin\Plugins\support\ProcessorExpert;D:\Archivos de programa\Metrowerks\CodeWarrior CW08_V3.0\lib\HC08c\INCLUDE" -Env"LIBPATH=D:\Archivos de programa\Metrowerks\CodeWarrior CW08_V3.0\lib\HC08c\INCLUDE" -EnvOBJPATH=Z:\itext\itext_gp32\bin -EnvTEXTPATH=Z:\itext\itext_gp32\bin -Lasm=%n.lst -Ms -ObjN=Z:\itext\itext_gp32\itext-gp32_Data\P&E_FCS\ObjectCode\SERIAL.C.o -WmsgSd1106

  0000 87               PSHA  
  266:    if(Edge > 1)
  0001 a101             CMP   #1
  0003 2304             BLS   L9 ;abs = 0009
  267:      return ERR_RANGE;
  0005 a602             LDA   #2
  268:    EnUser=FALSE;
  269:    HWEnDi();                            /* Disable device */
  270:    SPCR_CPHA = SPCR_CPOL ^ Edge;        /* Set phase bit */
  271:    EnUser=TRUE;
  272:    HWEnDi();                            /* Enable device */
  273:    return ERR_OK;
  274:  }
  0007 8a               PULH  
  0008 81               RTS   
  0009          L9:     
  0009 4f               CLRA  
  000a c70000           STA   EnUser
  000d cd0000           JSR   HWEnDi
  0010 4f               CLRA  
  0011 090001           BRCLR 4,_SPCR,L15 ;abs = 0015
  0014 4c               INCA  
  0015          L15:    
  0015 95               TSX   
  0016 f8               EOR   ,X
  0017 a501             BIT   #1
  0019 2603             BNE   L1E ;abs = 001e
  001b 1700             BCLR  3,_SPCR
  001d 65               SKIP2 L20 ;abs = 0020
  001e          L1E:    
  001e 1600             BSET  3,_SPCR
  0020          L20:    
  0020 a601             LDA   #1
  0022 c70000           STA   EnUser
  0025 cd0000           JSR   HWEnDi
  0028 4f               CLRA  
  0029 8a               PULH  
  002a 81               RTS   
  275:  
  276:  /*
  277:  ** ===================================================================
  278:  **     Method      :  SERIAL_SetIdleClockPolarity (bean SynchroMaster)
  279:  **
  280:  **     Description :
  281:  **         Set the idle clock polarity in runtime. If communication
  282:  **         does not run, clock signal will have required level.
  283:  **     Parameters  :
  284:  **         NAME            - DESCRIPTION
  285:  **         Level           - Idle clock polarity:
  286:  **                           0-low
  287:  **                           1-high
  288:  **     Returns     :
  289:  **         ---             - Error code, possible codes:
  290:  **                           ERR_OK - OK
  291:  **                           ERR_SPEED - This device does not work in
  292:  **                           the active speed mode
  293:  **                           ERR_DISABLED -  Device is disabled
  294:  **                           ERR_RANGE - Parameter out of range
  295:  ** ===================================================================
  296:  */
  297:  byte SERIAL_SetIdleClockPolarity(byte Level)
  298:  {

Function: SERIAL_SetIdleClockPolarity
Source  : Z:\itext\itext_gp32\Code\SERIAL.C
Options : -Env"GENPATH=Z:\itext\itext_gp32;Z:\itext\itext_gp32\bin;Z:\itext\itext_gp32\prm;Z:\itext\itext_gp32\cmd;Z:\itext\itext_gp32\Sources;D:\Archivos de programa\Metrowerks\CodeWarrior CW08_V3.0\lib\HC08c\LIB;D:\Archivos de programa\Metrowerks\CodeWarrior CW08_V3.0\lib\HC08c\SRC;Z:\itext\itext_gp32\Code;Z:\itext\itext_gp32\doc;D:\Archivos de programa\Metrowerks\CodeWarrior CW08_V3.0\lib\hc08c\include;D:\Archivos de programa\Metrowerks\CodeWarrior CW08_V3.0\Bin\Plugins\support\ProcessorExpert\PESL\HC08;D:\Archivos de programa\Metrowerks\CodeWarrior CW08_V3.0\Bin\Plugins\support\ProcessorExpert;D:\Archivos de programa\Metrowerks\CodeWarrior CW08_V3.0\lib\HC08c\INCLUDE" -Env"LIBPATH=D:\Archivos de programa\Metrowerks\CodeWarrior CW08_V3.0\lib\HC08c\INCLUDE" -EnvOBJPATH=Z:\itext\itext_gp32\bin -EnvTEXTPATH=Z:\itext\itext_gp32\bin -Lasm=%n.lst -Ms -ObjN=Z:\itext\itext_gp32\itext-gp32_Data\P&E_FCS\ObjectCode\SERIAL.C.o -WmsgSd1106

  0000 87               PSHA  
  299:    if(Level > 1)
  0001 a101             CMP   #1
  0003 2304             BLS   L9 ;abs = 0009
  300:      return ERR_RANGE;
  0005 a602             LDA   #2
  301:    if(SPCR_CPOL != Level) {
  302:      EnUser=FALSE;
  303:      HWEnDi();                          /* Disable device */
  304:      SPCR ^= 24;                        /* Invert polarity and phase bit */
  305:      EnUser=TRUE;
  306:      HWEnDi();                          /* Enable device */
  307:    }
  308:    if (Level)                           /* Set the idle clock polarity for the disable state of the SynchroMaster */
  309:      PTD |= 8;
  310:    else
  311:      PTD &= ~8;
  312:    return ERR_OK;
  313:  }
  0007 8a               PULH  
  0008 81               RTS   
  0009          L9:     
  0009 080002           BRSET 4,_SPCR,LE ;abs = 000e
  000c 4f               CLRA  
  000d 65               SKIP2 L10 ;abs = 0010
  000e          LE:     
  000e a601             LDA   #1
  0010          L10:    
  0010 95               TSX   
  0011 f1               CMP   ,X
  0012 2715             BEQ   L29 ;abs = 0029
  0014 4f               CLRA  
  0015 c70000           STA   EnUser
  0018 cd0000           JSR   HWEnDi
  001b b600             LDA   _SPCR
  001d a818             EOR   #24
  001f b700             STA   _SPCR
  0021 a601             LDA   #1
  0023 c70000           STA   EnUser
  0026 cd0000           JSR   HWEnDi
  0029          L29:    
  0029 95               TSX   
  002a 7d               TST   ,X
  002b 2703             BEQ   L30 ;abs = 0030
  002d 1600             BSET  3,_PTD
  002f 65               SKIP2 L32 ;abs = 0032
  0030          L30:    
  0030 1700             BCLR  3,_PTD
  0032          L32:    
  0032 4f               CLRA  
  0033 8a               PULH  
  0034 81               RTS   
  314:  
  315:  /*
  316:  ** ===================================================================
  317:  **     Method      :  SERIAL_Init (bean SynchroMaster)
  318:  **
  319:  **     Description :
  320:  **         This method is internal. It is used by Processor Expert
  321:  **         only.
  322:  ** ===================================================================
  323:  */
  324:  void SERIAL_Init(void)
  325:  {

Function: SERIAL_Init
Source  : Z:\itext\itext_gp32\Code\SERIAL.C
Options : -Env"GENPATH=Z:\itext\itext_gp32;Z:\itext\itext_gp32\bin;Z:\itext\itext_gp32\prm;Z:\itext\itext_gp32\cmd;Z:\itext\itext_gp32\Sources;D:\Archivos de programa\Metrowerks\CodeWarrior CW08_V3.0\lib\HC08c\LIB;D:\Archivos de programa\Metrowerks\CodeWarrior CW08_V3.0\lib\HC08c\SRC;Z:\itext\itext_gp32\Code;Z:\itext\itext_gp32\doc;D:\Archivos de programa\Metrowerks\CodeWarrior CW08_V3.0\lib\hc08c\include;D:\Archivos de programa\Metrowerks\CodeWarrior CW08_V3.0\Bin\Plugins\support\ProcessorExpert\PESL\HC08;D:\Archivos de programa\Metrowerks\CodeWarrior CW08_V3.0\Bin\Plugins\support\ProcessorExpert;D:\Archivos de programa\Metrowerks\CodeWarrior CW08_V3.0\lib\HC08c\INCLUDE" -Env"LIBPATH=D:\Archivos de programa\Metrowerks\CodeWarrior CW08_V3.0\lib\HC08c\INCLUDE" -EnvOBJPATH=Z:\itext\itext_gp32\bin -EnvTEXTPATH=Z:\itext\itext_gp32\bin -Lasm=%n.lst -Ms -ObjN=Z:\itext\itext_gp32\itext-gp32_Data\P&E_FCS\ObjectCode\SERIAL.C.o -WmsgSd1106 -WmsgSd4002

  326:    SPCR = 0;                            /* Reset the device register */
  0000 3f00             CLR   _SPCR
  327:    #pragma MESSAGE DISABLE C4002        /* Disable warning C4002 "Result not used" */
  328:    SPDR;                                /* Read the device register */
  0002 b600             LDA   _SPDR
  329:    /* SPSCR: SPRF=0,ERRIE=0,OVRF=0,MODF=0,SPTE=0,MODFEN=0,SPR1=1,SPR0=0 */
  330:    SPSCR = 2;                           /* Set the baud rate register */
  0004 6e0200           MOV   #2,_SPSCR
  331:    /* SPCR: SPRIE=0,??=0,SPMSTR=1,CPOL=1,CPHA=1,SPWOM=0,SPE=0,SPTIE=0 */
  332:    SPCR = 56;                           /* Set the clock edge to rising */
  0007 6e3800           MOV   #56,_SPCR
  333:    SerFlag = 0;                         /* Reset all flags */
  000a 4f               CLRA  
  000b c70000           STA   SerFlag
  334:    EnUser = TRUE;                       /* Enable device */
  000e 4c               INCA  
  000f c70000           STA   EnUser
  335:    HWEnDi();                            /* Enable/disable device according to the status flags */
  0012 cc0000           JMP   HWEnDi
  336:  }
  337:  
  338:  /* END SERIAL. */
  339:  
  340:  /*
  341:  ** ###################################################################
  342:  **
  343:  **     This file was created by UNIS Processor Expert 03.23 for 
  344:  **     the Motorola HC08 series of microcontrollers.
  345:  **
  346:  ** ###################################################################
  347:  */
  348:  
