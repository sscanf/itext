/*
** ###################################################################
**
**     THIS BEAN MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
**
**     Filename  : SM1.H
**
**     Project   : itext_gp32
** 
**     Processor : MC68HC908GP32CFB
**
**     Beantype  : SynchroMaster
**
**     Version   : Bean 02.154, Driver 01.42, CPU db: 2.89.000
**
**     Compiler  : Metrowerks HC08 C Compiler
**
**     Date/Time : 03/01/2007, 12:22
**
**     Abstract  :
**
**         This bean "SynchroMaster" implements MASTER part of synchronous
**         serial master-slave communication.
**
**     Settings  :
**
**         Synchro type                : MASTER
**
**         Serial channel              : SPI
**
**         Protocol
**             Init baud rate          : 0_814us
**             Clock edge              : rising
**             Width                   : 8 bits (always)
**             Empty character         : 0
**             Empty char. on input    : RECEIVED
**
**         Registers
**             Input buffer            : SPDR      [18]
**             Output buffer           : SPDR      [18]
**             Control register        : SPCR      [16]
**             Mode register           : SPCR      [16]
**             Baud setting reg.       : SPSCR     [17]
**
**
**
**         Used pins                   : 
**       ----------------------------------------------------------
**            Function    | On package |    Name
**       ----------------------------------------------------------
**             Input      |     13     |  PTD1_MISO
**             Output     |     14     |  PTD2_MOSI
**             Clock      |     15     |  PTD3_SPSCK
**       ----------------------------------------------------------
**
**     Contents  :
**
**         RecvChar              - byte SM1_RecvChar(_TComData *Chr);
**         SendChar              - byte SM1_SendChar(_TComData Chr);
**         CharsInRxBuf          - byte SM1_CharsInRxBuf(word *Chr);
**         GetCharsInRxBuf       - word SM1_GetCharsInRxBuf(void);
**         SetShiftClockPolarity - byte SM1_SetShiftClockPolarity(byte Edge);
**         SetIdleClockPolarity  - byte SM1_SetIdleClockPolarity(byte Level);
**
**
**     (c) Copyright UNIS, spol. s r.o. 1997-2002
**
**     UNIS, spol. s r.o.
**     Jundrovska 33
**     624 00 Brno
**     Czech Republic
**
**     http      : www.processorexpert.com
**     mail      : info@processorexpert.com
**
** ###################################################################
*/

#ifndef __SM1
#define __SM1

/* MODULE SM1. */

#include "Cpu.h"

typedef union {
  byte err;
  struct {
    bool OverRun  : 1;                 /* OverRun error flag */
    bool RxBufOvf : 1;                 /* Rx buffer full error flag */
    bool FaultErr : 1;                 /* Fault mode error flag */
  }errName;
} SM1_TError;

#define SM1_EOF 0                      /* Empty character*/

byte SM1_RecvChar(byte *Chr);
/*
** ===================================================================
**     Method      :  SM1_RecvChar (bean SynchroMaster)
**
**     Description :
**         If any data received, this method returns one character,
**         otherwise it returns error code (it does not wait for
**         data).
**     Parameters  :
**         NAME            - DESCRIPTION
**       * Chr             - Pointer to received character
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
**                           ERR_RXEMPTY - No data in receiver
**                           ERR_OVERRUN - Overrun error was detected
**                           from last char or block receiving
**                           ERR_FAULT - Fault error was detected
**                           from last char or block receiving. This
**                           error may not be supported on some CPUs
**                           (see generated code).
** ===================================================================
*/

byte SM1_SendChar(byte Chr);
/*
** ===================================================================
**     Method      :  SM1_SendChar (bean SynchroMaster)
**
**     Description :
**         Send one character to the channel.
**     Parameters  :
**         NAME            - DESCRIPTION
**         Chr             - Character to send
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
**                           ERR_TXFULL - Transmitter is full
** ===================================================================
*/

byte SM1_CharsInRxBuf(word *Chr);
/*
** ===================================================================
**     Method      :  SM1_CharsInRxBuf (bean SynchroMaster)
**
**     Description :
**         Return number of characters in the input buffer.
**         (deprecated method)
**     Parameters  :
**         NAME            - DESCRIPTION
**       * Chr             - Pointer to number of characters in the
**                           input buffer
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
** ===================================================================
*/

word SM1_GetCharsInRxBuf(void);
/*
** ===================================================================
**     Method      :  SM1_GetCharsInRxBuf (bean SynchroMaster)
**
**     Description :
**         Return number of characters in the input buffer.
**         Note: If the Interrupt service is disabled, and the
**         Ignore empty character is set to yes, and a character has
**         been received, then this method returns 1 although it was
**         an empty character.
**     Parameters  : None
**     Returns     :
**         ---             - Number of characters in the input
**                           buffer.
** ===================================================================
*/

byte SM1_SetShiftClockPolarity(byte Edge);
/*
** ===================================================================
**     Method      :  SM1_SetShiftClockPolarity (bean SynchroMaster)
**
**     Description :
**         Set the shift clock polarity in runtime. Output data will
**         be shifted on the selected edge polarity.
**     Parameters  :
**         NAME            - DESCRIPTION
**         Edge            - Edge polarity.
**                           0-falling edge
**                           1-rising edge
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
**                           ERR_DISABLED -  Device is disabled
**                           ERR_RANGE - Parameter out of range
** ===================================================================
*/

byte SM1_SetIdleClockPolarity(byte Level);
/*
** ===================================================================
**     Method      :  SM1_SetIdleClockPolarity (bean SynchroMaster)
**
**     Description :
**         Set the idle clock polarity in runtime. If communication
**         does not run, clock signal will have required level.
**     Parameters  :
**         NAME            - DESCRIPTION
**         Level           - Idle clock polarity:
**                           0-low
**                           1-high
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
**                           ERR_DISABLED -  Device is disabled
**                           ERR_RANGE - Parameter out of range
** ===================================================================
*/

void SM1_Init(void);
/*
** ===================================================================
**     Method      :  SM1_Init (bean SynchroMaster)
**
**     Description :
**         This method is internal. It is used by Processor Expert
**         only.
** ===================================================================
*/


/* END SM1. */

#endif /* ifndef __SM1 */
/*
** ###################################################################
**
**     This file was created by UNIS Processor Expert 03.23 for 
**     the Motorola HC08 series of microcontrollers.
**
** ###################################################################
*/
